import { useEffect, useState, useRef } from "react";
import Head from "next/head";
import { useSession, signIn, signOut } from "next-auth/react";
import PricingCards from "@/components/pricingCards";
import Nav from "@/components/nav";
import MarketingCopy from "@/components/marketingCopy";
import GenerateContent from "@/components/generateContent";
const deepai = require("deepai");
deepai.setApiKey("4b9654b7-fed2-4a6d-b02a-7833b530305c");

export default function Home() {
  const { data: session } = useSession();
  const [myText, setText] = useState("Click Generate to get your post...");
  const [myImageText, setImageText] = useState();
  const [imgURL, setImgURL] = useState();
  const [profileClicked, setProfileClicked] = useState(false);
  const [generateClicked, setGenerateClicked] = useState(false);
  const [clipboardClicked, setClipboardClicked] = useState(false);
  const [displayedText, setDisplayedText] = useState("");
  const fullText =
    "wee are helping people automating their social media scalability by automating the post-creation streamline. your social media manager assistant is a click away check this live demo and experience the future!";

  useEffect(() => {
    let currentIndex = 0;
    const interval = setInterval(() => {
      setDisplayedText((prevText) => prevText + fullText[currentIndex]);
      currentIndex++;
      if (currentIndex >= fullText.length - 1) clearInterval(interval);
    }, 10);
    return () => {
      clearInterval(interval);
      console.log("clean up");
    };
  }, []);

  const generateText = (myPrompt) => {
    fetch("https://api.openai.com/v1/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: process.env.OPENAIAPIKEY,
      },
      body: JSON.stringify({
        model: "text-davinci-003",
        prompt: myPrompt,
        temperature: 0.5,
        max_tokens: 250,
        top_p: 1,
        n: 1,
        frequency_penalty: 0,
        presence_penalty: 0,
      }),
    })
      .then((response) => response.json())
      .then((data) => {
        console.log("text", data.choices[0].text);
        console.log("splitted", data.choices[0].text.split("\n"));
        setText(data.choices[0].text);
        generateImageText(data.choices[0].text);
      })
      .catch((error) => console.error(error));
  };

  const generateImageText = (myPrompt) => {
    fetch("https://api.openai.com/v1/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: process.env.OPENAIAPIKEY,
      },
      body: JSON.stringify({
        model: "text-davinci-003",
        prompt: `"${myPrompt}" describe in a comma seprated words and if it's product or service always describe the product itself and igonre the rest of text.`,
        temperature: 0.5,
        max_tokens: 250,
        top_p: 1,
        n: 1,
        frequency_penalty: 0,
        presence_penalty: 0,
      }),
    })
      .then((response) => response.json())
      .then((data) => {
        console.log("myImageText is:", data.choices[0].text);
        generateImage(
          data.choices[0].text + ",white background, one item, product"
        );
      })
      .catch((error) => console.error(error));
  };
  const generateImage = (prompt) => {
    fetch("https://api.openai.com/v1/images/generations", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: process.env.OPENAIAPIKEY,
      },
      body: JSON.stringify({
        model: "image-alpha-001",
        prompt: prompt,
        num_images: 1,
        size: "512x512",
        response_format: "url",
      }),
    })
      .then((response) => {
        if (!response.ok) {
          throw new Error("Network response was not ok");
        }
        return response.json();
      })
      .then((data) => {
        setImgURL(data.data[0].url);
        console.log(data.data[0].url);
      })
      .catch((error) => {
        console.error("Error fetching image:", error);
      });
  };

  return (
    <>
      <Head>
        <title>WriteWise.com</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div>
          <div className="bg-gradient-to-bl from-myPurple to-myPurple rounded-br-custome">
            <Nav
              session={session}
              setProfileClicked={setProfileClicked}
              profileClicked={profileClicked}
              signOut={signOut}
            />
            <MarketingCopy
              session={session}
              displayedText={displayedText}
              signIn={signIn}
            />
          </div>
          <div className="p-10 max-w-2xl mx-auto mt-10">
            <GenerateContent
              myText={myText}
              setClipboardClicked={setClipboardClicked}
              clipboardClicked={clipboardClicked}
              setGenerateClicked={setGenerateClicked}
              generateImage={generateImage}
              generateText={generateText}
              imgURL={imgURL}
              generateClicked={generateClicked}
              myImageText={myImageText}
              generateImageText={generateImageText}
            />
          </div>
          <PricingCards />
        </div>
      </main>
    </>
  );
}
